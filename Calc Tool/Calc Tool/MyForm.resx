<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAQEREAEBERAE/REQDOkJDAT9FQwBXTUoBUUtJA0hIRgVMSUcEV01KAlZNSgJRS0kDSEhGBUxJ
        RwRXTUoCVk1KAlFLSQNISEYFTElHBFdNSgJWTUoCUUtJA0hIRgVMSUcEWEtHAWJARgAyQEIAPkREA0BE
        RAI/Q0MAQEREAEBERABAREQATkhGAExIRQRTSUc0VUpHeFZKR5tWSkeiVkpHo1VKR6NWSkeiVkpHolZK
        R6JWSkejVUpHo1ZKR6JWSkeiVkpHolZKR6NVSkejVkpHolZKR6JWSkeiVkpHo1VKR6RWSkeeVkpHglZK
        Rz1RSUYGPUNDBkBERANAREQAQEREAjxDQwFVSkcDVkpHZFZKR+RVSkf/VkpH/1ZKR/9WSkf/VkpH/1VK
        R/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VK
        R/9WSkf/VkpH7lZKR4JQSEcNPUNEBkBERAJAREQBLT9BA1VKR0pWSkfsVkpH/1ZKR/9VSkf/VkpH/1ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH+FZKR2saOzsBP0REA1NJRwBOSEYIVUpHrFZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpHzFZKRxVjTkkAVkpHAFZKRxdWSkfVVUpH/1ZK
        R/9WSkf/VkpH2FZKR6JVSkftVkpH/1ZKR/9WSkfWVkpHw1VKR/tWSkf/VkpH/1ZKR/9WSkf/VUpH/1ZK
        R+lWSkfXVkpH11ZKR9dVSkfYVkpH2FZKR91WSkf6VkpH/1VKR/9WSkftVkpHMlZKRwBZS0cAVkpHHVZK
        R99WSkf/VUpH/1ZKR/9WSkd7W0xJAVVKR2ZVSkfwVkpHyVZKRy1WSkceVkpH11VKR/9WSkf/VkpH/1ZK
        R/9WSkfyU0lHVVJJRxZWSkgVVkpIFFJJRxhOSEceU0lHIVZKR7lWSkf/VkpH/1VKR/NVSkc9VkpHAP//
        zQBVSkcfVkpH31ZKR/9WSkf/VUpH/1ZKR89WSkcyVktIA1VKR1JRSUY2Mz8/AlZKR11WSkfwVkpH/1VK
        R/9WSkf/VkpH/1ZKR/ZVSkd1UkpHQlRKRz5WS0c8VktHPFRKR0BTSkdPVkpHzFZKR/9WSkf/VkpH9FRJ
        R0JqT0oAf1ZNAFJJRyJWSkfgVkpH/1ZKR/9WSkf/VUpH/1ZKR85WSkcpVUpHADVBQgJTSUdeVkpH61ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/tWSkf3VUpH91ZKR/ZWSkf2VkpH9lZKR/lVSkf/VkpH/1ZK
        R/9WSkfzVUlHPq9gUwBVSkcAVEpHH1VKR+BWSkf/VkpH/1ZKR/9WSkf/VUpHy1RJRypWSkcAV0hJAFVK
        R2BVSkfwVkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH5FZKR9FWSkfRVUpH01ZKR9NWSkfRVkpH11ZK
        R/hVSkf/VkpH/1ZKR/NWSUc8WkpHAFZKRwBWSkcdVkpH31VKR/9WSkf/VkpH/1ZKR81USkcvOkJDCVVK
        R01WSkcxV0tJAlVKR2dVSkfxVkpH/1ZKR/9WSkf/VkpH/1VKR/JVSkdMV0pGDldKRhBSSUYUTkdFG1JJ
        RhRXSkYYVkpHt1ZKR/9VSkf/VkpH81ZJRzxWSkcAWUtHAFZKRx1WSkffVkpH/1VKR/9WSkf/VkpHmlZJ
        RgVVSkddVUpH7FZKR85WSkcxVkpHDVZKR8NVSkf/VkpH/1ZKR/9WSkf/VkpH91RKR31VSkZCVkpGQ1ZK
        RkNVSkZHU0lGS1VKR09WSkfNVkpH/1ZKR/9VSkfzVUlHPlZKRwD//9AAVUpHHlZKR99WSkf/VkpH/1VK
        R/9WSkfvVkpHuFZKR+pWSkf/VUpH/1ZKR9RWSkejVkpH8FZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/FVK
        R/hWSkf3VkpH91ZKR/dWSkf4VUpH+VZKR/9WSkf/VkpH/1ZKR/RUSUdCak9KAH9WTQBSSUciVkpH4FZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH81VJRz6vYFMAVUpHAFRK
        Rx9VSkfgVkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkfzVklHPFpK
        RwBWSkcAVkpHHVZKR99VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZK
        R/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZK
        R/NWSUc8VkpHAFlLRwBWSkcdVkpH31ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZK
        R/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZK
        R/9WSkf/VUpH81VJRz5WSkcA///QAFVKRx5WSkffVkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf1VkpHo1VK
        R8BWSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VK
        R/9WSkf/VkpH/1ZKR/9WSkf0VElHQmpPSgB/Vk0AUklHIlZKR+BWSkf/VkpH/1ZKR/9VSkf/VkpH/1ZK
        R89XSkcRVUpHRVVKR/ZWSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/NVSUc+r2BTAFVKRwBUSkcfVUpH4FZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpHyVdLRwxVS0c9VkpH9FVKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH81ZJRzxaSkcAVkpHAFZKRx1WSkffVUpH/1ZK
        R/9WSkfuVkpHy1ZKR8tVSkehUElGDVZKRy9WSke/VkpHyFVKR9VWSkf6VkpH/1ZKR/9WSkf/VUpH/1ZK
        R99WSkfIVkpHyFZKR8hVSkfKVkpHylZKR8lWSkfoVkpH/1VKR/9WSkfzVklHPFZKRwBZS0cAVkpHHVZK
        R99WSkf/VUpH/1VKR4NVSUcKVUlHC05HRg1BREQMSUZFB1VJRwtVSUcLU0lHHFVKR8RWSkf/VkpH/1ZK
        R/9WSkfxU0lGTU5HRg1VSUcLVUlHC09IRg9KRkYWTkhGDVZKR2VWSkf9VkpH/1VKR/NVSUc+VkpHAP//
        0ABVSkceVkpH31ZKR/9WSkf/VUpHsVVKR05WSkdNVkpHPEtHRQhNSEYcVUpHSlZKR0tWSkdeVkpH21VK
        R/9WSkf/VkpH/1ZKR/hVSkeEU0pHUlVKR01WSkdMVkpHTFVKR1BTSkdTVkpHm1ZKR/9WSkf/VkpH9FRJ
        R0JqT0oAf1ZNAFJJRyJWSkfgVkpH/1ZKR/9WSkf+VUpH+1ZKR/5WSkfGV0tHDFRKRz1VSkfwVkpH+1ZK
        R/xWSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/1WSkf7VUpH+1ZKR/tWSkf7VkpH+1ZKR/tVSkf+VkpH/1ZK
        R/9WSkfzVUlHP69gUwBVSkcAVEpHHlVKR99WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR8lXS0cMVktHPFZK
        R/NVSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZK
        R/9VSkf/VkpH/1ZKR/NWSkc8WktHAFZKRwBWSkcVVkpH0VVKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH3VVK
        RzdWSkdmVkpH+lZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZK
        R/9WSkf/VkpH/1ZKR/9VSkf/VkpH61ZKRy9WSkcAh1hMAFZKRgNWSkeeVkpH/1VKR/9WSkf/VkpH/1ZK
        R/9WSkf+VUpH6FZKR/BWSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZK
        R/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkfFUklGE1VKRwBAREQCiFhOAFZKRzhWSkfhVkpH/1VK
        R/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZKR/9WSkf/VkpH/1VK
        R/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH8VVKR1s1QUIFQEREAkBERAE/REQGQ0VEA1ZK
        R0xWSkfPVkpH/FVKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/1ZKR/9WSkf/VkpH/1ZKR/9VSkf/VkpH/1ZK
        R/9WSkf/VkpH/1VKR/9WSkf/VkpH/1ZKR/9WSkf/VUpH/lZKR99WSkdnV0pIBTtDQwJAREQDQEREAEBE
        RANAREQJPENDAlZKRxxWSkdZVUpHfVVKR4dVSkeFVkpHglZKR4JVSkeDVUpHh1VKR4VWSkeCVkpHglVK
        R4NVSkeHVUpHhVZKR4JWSkeCVUpHg1VKR4dVSkeFVkpHglZKR39VSkdkUUlGL0dFRARLR0UAQEREAEBE
        RAFAREQAQEREAEBERANAREQGO0NDAT9ERAAkOz8AIzo+ASg8QAMeOT4AHDg+ACQ7PwAjOj4BKDxAAx45
        PgAcOD4AJDs/ACM6PgEoPEADHjk+ABw4PgAkOz8AIzo+ASg8QAMeOT4AHDg+AD5ERAA6QkMCP0REBkBE
        RAJAREQAQEREAAAAAABAREQAQEREAEBERAFAREQCQEREAEBERAA3RkYAQEREAUBERAJAREQAQEREADdG
        RgBAREQBQEREAkBERABAREQAN0ZGAEBERAFAREQCQEREAEBERAA3RkYAQEREAUBERAJAREQAQEREAEBE
        RABAREQBQEREAkBERABAREQAxAAAAyAAAAEAAAAAAAAAAIAAAAGAAAABgAAAAYAAAAGAQAABgGAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABQAAAAAAAAACAAAAExjGMY8IQhCE=
</value>
  </data>
</root>